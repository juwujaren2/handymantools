@model HandymanTools.Models.CustomerCreateProfileViewModel

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <div class="jumbotron handyman-jumbotron">
            <h2><span class="glyphicon glyphicon-user" aria-hidden="true"></span> Create new profile</h2>
        </div>
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <br />
        <div class="form-group">
            @Html.LabelFor(model => model.UserName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @if (Session["newUser"] != null)
                {
                    @Html.EditorFor(model => model.UserName, new { htmlAttributes = new { @class = "form-control", @Value = Session["newUser"].ToString() } })
                    Session.Remove("newUser");
                }
                else
                {
                    @Html.EditorFor(model => model.UserName, new { htmlAttributes = new { @class = "form-control" } })
                }

                @Html.ValidationMessageFor(model => model.UserName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @if (Session["newPassword"] != null)
                {
                    @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control", @Value = Session["newPassword"].ToString() } })
                    Session.Remove("newPassword");
                }
                else
                {
                    @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control" } })
                }
                @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ConfirmPassword, htmlAttributes: new { @class = "control-label col-md-2", })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ConfirmPassword, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.HomePhone, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="col-md-1 profile-areacode">
                    @Html.EditorFor(model => model.HomeAreaCode, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.HomeAreaCode, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-3">
                    @Html.EditorFor(model => model.HomePhone, new { htmlAttributes = new { @class = "form-control profile-phone" } })
                    @Html.ValidationMessageFor(model => model.HomePhone, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.WorkPhone, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="col-md-1 profile-areacode">
                    @Html.EditorFor(model => model.WorkAreaCode, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.WorkAreaCode, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-3">
                    @Html.EditorFor(model => model.WorkPhone, new { htmlAttributes = new { @class = "form-control profile-phone" } })
                    @Html.ValidationMessageFor(model => model.WorkPhone, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-primary" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Return to Login", "Login", "User")
</div>
